{{>licenseInfo}}

/* tslint:disable:no-unused-locals */
{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}
import * as Types from "../../types";
import {ensureJSON} from "../../utils";
import {Readable} from "stream";

import { RequestFile } from './apis';
import HTTPClient from "../../http";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

{{#operations}}

interface httpClientConfig {
    baseURL?: string;
    // TODO support defaultHeaders?
}


export class {{classname}} {
    private httpClient: HTTPClient;

    constructor(config: httpClientConfig = {}) {
        if (!config.baseURL) {
            config.baseURL = '{{#lambda.endpoint}}{{classname}}{{/lambda.endpoint}}';
        }
        this.httpClient = new HTTPClient(config);
    }

{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}) : Promise<{{#returnType}}{{{.}}}{{/returnType}}{{^returnType}}Types.MessageAPIResponseBase{{/returnType}}> {
        let params = undefined;
        {{#allParams}}
            // isQueryParam={{isQueryParam}} isFormParam={{isFormParam}} isQueryParam={{isQueryParam}} isPathParam={{isPathParam}} isHeaderParam={{isHeaderParam}} isBodyParam={{isBodyParam}} isModel={{isModel}}
            {{#isBodyParam}}params = {{{paramName}}}{{/isBodyParam}}
            {{#isFormParam}}
                if (!params) {
                    params = {};
                }
                params["{{{paramName}}}"] = {{{paramName}}};
            {{/isFormParam}}
            {{#isQueryParam}}
                if (!params) {
                    params = {};
                }
                params["{{{paramName}}}"] = {{{paramName}}};
            {{/isQueryParam}}
        {{/allParams}}

        {{#vendorExtensions.isStream}}
        return this.httpClient.{{#lambda.lower}}{{{httpMethod}}}{{/lambda.lower}}Stream("{{{path}}}"{{#lambda.pathReplace}}{{{path}}}{{/lambda.pathReplace}});
        {{/vendorExtensions.isStream}}
        {{^vendorExtensions.isStream}}
        const res = this.httpClient.{{#lambda.lower}}{{{httpMethod}}}{{/lambda.lower}}{{#returnType}}<{{{.}}}>{{/returnType}}(
            "{{{path}}}"{{#lambda.pathReplace}}{{{path}}}{{/lambda.pathReplace}},
            params,
        );
        return ensureJSON(res);
        {{/vendorExtensions.isStream}}
    }
{{/operation}}
}
{{/operations}}
