/**
 * Channel Access Token API
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { ChannelAccessTokenKeyIdsResponse } from '../model/channelAccessTokenKeyIdsResponse';
import { ErrorResponse } from '../model/errorResponse';
import { IssueChannelAccessTokenResponse } from '../model/issueChannelAccessTokenResponse';
import { IssueShortLivedChannelAccessTokenResponse } from '../model/issueShortLivedChannelAccessTokenResponse';
import { IssueStatelessChannelAccessTokenResponse } from '../model/issueStatelessChannelAccessTokenResponse';
import { VerifyChannelAccessTokenResponse } from '../model/verifyChannelAccessTokenResponse';
import * as Types from "../../types";
import {ensureJSON} from "../../utils";
import {Readable} from "stream";

import { RequestFile } from '../../http';
import HTTPClient from "../../http";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


interface httpClientConfig {
    baseURL?: string;
    // TODO support defaultHeaders?
}


export class ChannelAccessTokenClient {
    private httpClient: HTTPClient;

    constructor(config: httpClientConfig = {}) {
        if (!config.baseURL) {
            config.baseURL = 'https://api.line.me';
        }
        this.httpClient = new HTTPClient(config);
    }

    /**
     * Gets all valid channel access token key IDs.
     * @param clientAssertionType &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60;
     * @param clientAssertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key.
     */
    public async getsAllValidChannelAccessTokenKeyIds(clientAssertionType: string, clientAssertion: string, ) : Promise<ChannelAccessTokenKeyIdsResponse> {
        



        const params = {}; // form params
        params["clientAssertionType"] = clientAssertionType;
        params["clientAssertion"] = clientAssertion;


        const res = this.httpClient.get<ChannelAccessTokenKeyIdsResponse>(
            "/oauth2/v2.1/tokens/kid",
            
            
            params,
            
        );
        return ensureJSON(res);
    }
    /**
     * Issue short-lived channel access token
     * @param grantType &#x60;client_credentials&#x60;
     * @param clientId Channel ID.
     * @param clientSecret Channel secret.
     */
    public async issueChannelToken(grantType?: string, clientId?: string, clientSecret?: string, ) : Promise<IssueShortLivedChannelAccessTokenResponse> {
        


        const params = {}; // form params
        params["grantType"] = grantType;
        params["clientId"] = clientId;
        params["clientSecret"] = clientSecret;



        const res = this.httpClient.postForm<IssueShortLivedChannelAccessTokenResponse>(
            "/v2/oauth/accessToken",
            
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Issues a channel access token that allows you to specify a desired expiration date. This method lets you use JWT assertion for authentication.
     * @param grantType client_credentials
     * @param clientAssertionType urn:ietf:params:oauth:client-assertion-type:jwt-bearer
     * @param clientAssertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
     */
    public async issueChannelTokenByJWT(grantType?: string, clientAssertionType?: string, clientAssertion?: string, ) : Promise<IssueChannelAccessTokenResponse> {
        


        const params = {}; // form params
        params["grantType"] = grantType;
        params["clientAssertionType"] = clientAssertionType;
        params["clientAssertion"] = clientAssertion;



        const res = this.httpClient.postForm<IssueChannelAccessTokenResponse>(
            "/oauth2/v2.1/token",
            
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Issues a new stateless channel access token, which doesn\'t have max active token limit unlike the other token types. The newly issued token is only valid for 15 minutes but can not be revoked until it naturally expires. 
     * @param grantType &#x60;client_credentials&#x60;
     * @param clientAssertionType URL-encoded value of &#x60;urn:ietf:params:oauth:client-assertion-type:jwt-bearer&#x60;
     * @param clientAssertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
     * @param clientId Channel ID.
     * @param clientSecret Channel secret.
     */
    public async issueStatelessChannelToken(grantType?: string, clientAssertionType?: string, clientAssertion?: string, clientId?: string, clientSecret?: string, ) : Promise<IssueStatelessChannelAccessTokenResponse> {
        


        const params = {}; // form params
        params["grantType"] = grantType;
        params["clientAssertionType"] = clientAssertionType;
        params["clientAssertion"] = clientAssertion;
        params["clientId"] = clientId;
        params["clientSecret"] = clientSecret;



        const res = this.httpClient.postForm<IssueStatelessChannelAccessTokenResponse>(
            "/oauth2/v3/token",
            
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Revoke short-lived or long-lived channel access token
     * @param accessToken Channel access token
     */
    public async revokeChannelToken(accessToken?: string, ) : Promise<Types.MessageAPIResponseBase> {
        


        const params = {}; // form params
        params["accessToken"] = accessToken;



        const res = this.httpClient.postForm(
            "/v2/oauth/revoke",
            
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Revoke channel access token v2.1
     * @param clientId Channel ID
     * @param clientSecret Channel Secret
     * @param accessToken Channel access token
     */
    public async revokeChannelTokenByJWT(clientId?: string, clientSecret?: string, accessToken?: string, ) : Promise<Types.MessageAPIResponseBase> {
        


        const params = {}; // form params
        params["clientId"] = clientId;
        params["clientSecret"] = clientSecret;
        params["accessToken"] = accessToken;



        const res = this.httpClient.postForm(
            "/oauth2/v2.1/revoke",
            
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Verify the validity of short-lived and long-lived channel access tokens
     * @param accessToken A short-lived or long-lived channel access token.
     */
    public async verifyChannelToken(accessToken?: string, ) : Promise<VerifyChannelAccessTokenResponse> {
        


        const params = {}; // form params
        params["accessToken"] = accessToken;



        const res = this.httpClient.postForm<VerifyChannelAccessTokenResponse>(
            "/v2/oauth/verify",
            
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * You can verify whether a Channel access token with a user-specified expiration (Channel Access Token v2.1) is valid.
     * @param accessToken Channel access token with a user-specified expiration (Channel Access Token v2.1).
     */
    public async verifyChannelTokenByJWT(accessToken: string, ) : Promise<VerifyChannelAccessTokenResponse> {
        



        const params = {}; // form params
        params["accessToken"] = accessToken;


        const res = this.httpClient.get<VerifyChannelAccessTokenResponse>(
            "/oauth2/v2.1/verify",
            
            
            params,
            
        );
        return ensureJSON(res);
    }
}
