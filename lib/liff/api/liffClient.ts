/**
 * LIFF server API
 * LIFF Server API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-locals */
import { AddLiffAppRequest } from '../model/addLiffAppRequest';
import { AddLiffAppResponse } from '../model/addLiffAppResponse';
import { GetAllLiffAppsResponse } from '../model/getAllLiffAppsResponse';
import { UpdateLiffAppRequest } from '../model/updateLiffAppRequest';
import * as Types from "../../types";
import {ensureJSON} from "../../utils";
import {Readable} from "stream";

import { RequestFile } from '../../http';
import HTTPClient from "../../http";

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


interface httpClientConfig {
    baseURL?: string;
    // TODO support defaultHeaders?
}


export class LiffClient {
    private httpClient: HTTPClient;

    constructor(config: httpClientConfig = {}) {
        if (!config.baseURL) {
            config.baseURL = 'https://api.line.me';
        }
        this.httpClient = new HTTPClient(config);
    }

    /**
     * Adding the LIFF app to a channel
     * @param addLiffAppRequest 
     */
    public async addLIFFApp(addLiffAppRequest: AddLiffAppRequest, ) : Promise<AddLiffAppResponse> {
        

        const params = addLiffAppRequest;



        const res = this.httpClient.post<AddLiffAppResponse>(
            "/liff/v1/apps",
            params,
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Deletes a LIFF app from a channel. 
     * @summary Delete LIFF app from a channel
     * @param liffId ID of the LIFF app to be updated
     */
    public async deleteLIFFApp(liffId: string, ) : Promise<Types.MessageAPIResponseBase> {
        




        const res = this.httpClient.delete(
            "/liff/v1/apps/{liffId}".replace("{liffId}", String(liffId)),
            
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Gets information on all the LIFF apps added to the channel.
     * @summary Get all LIFF apps
     */
    public async getAllLIFFApps() : Promise<GetAllLiffAppsResponse> {
        




        const res = this.httpClient.get<GetAllLiffAppsResponse>(
            "/liff/v1/apps",
            
            
            
        );
        return ensureJSON(res);
    }
    /**
     * Update LIFF app settings
     * @param liffId ID of the LIFF app to be updated
     * @param updateLiffAppRequest 
     */
    public async updateLIFFApp(liffId: string, updateLiffAppRequest: UpdateLiffAppRequest, ) : Promise<Types.MessageAPIResponseBase> {
        

        const params = updateLiffAppRequest;



        const res = this.httpClient.put(
            "/liff/v1/apps/{liffId}".replace("{liffId}", String(liffId)),
            params,
            
            
        );
        return ensureJSON(res);
    }
}
